{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"ethers\"","webpack:///external \"liteweb\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///./src/helper/ethersUtils.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","sha256","utils","keccak256","toUtf8Bytes","recoverAddress","SigningKey","AbiCoder","SolWeb","mainOptions","sideOptions","mainGatewayAddress","sideGatewayAddress","sideChainId","privateKey","this","mainchain","LiteWeb","sidechain","isAddress","setMainGatewayAddress","setSideGatewayAddress","setChainId","injectPromise","promiseInjector","validator","xlt","self","sign","multiSign","Error","isString","chainId","priKeyBytes","transaction","code","hexStr2byteArray","chainIdByteArr","byteArr","txID","concat","byteArrHash","signature","crypto","ECKeySign","replace","Array","isArray","includes","push","a","defaultPrivateKey","permissionId","callback","isFunction","isObject","raw_data","contract","Permission_id","address","toHex","fromPrivateKey","toLowerCase","getSignWeight","signWeight","result","message","foundKey","permission","keys","map","approved_list","indexOf","signTransaction","useLiteHeader","multisig","isHex","signatureHex","signString","parameter","owner_address","callValue","depositFee","feeLimit","options","depositXlt","notValid","type","gte","gt","lte","Number","at","contractInstance","depositXLT","send","tokenId","tokenValue","depositTrc10","depositTRC10","functionSelector","num","fee","contractAddress","depositTrc","approveInstance","approve","depositTRC20","depositTRC721","retryDeposit","retryMapping","id","xltHash","mappingFee","mappingTrc","startsWith","mappingTRC20","mappingTRC721","withdrawFee","withdrawXlt","withdrawXLT","withdrawTrc10","withdrawTRC10","numOrId","withdrawTrc","parameters","defaultAddress","base58","transactionBuilder","triggerSmartContract","JSON","stringify","signedTransaction","sendRawTransaction","broadcast","err","error","toUtf8","shouldPollResponse","checkResult","index","getTransactionInfo","output","length","setTimeout","resMessage","hasProperty","rawResponse","decoded","decodeOutput","outputs","contractResult","injectFund","hexAddress","fullNode","request","amount","nonce","retryWithdrawFee","retryDepositFee","retryMappingFee"],"mappings":"2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,gBClFrDhC,EAAOD,QAAUkC,QAAQ,+B,cCAzBjC,EAAOD,QAAUkC,QAAQ,4C,cCAzBjC,EAAOD,QAAUkC,QAAQ,W,cCAzBjC,EAAOD,QAAUkC,QAAQ,Y,cCAzBjC,EAAOD,QAAUkC,QAAQ,0C,cCAzBjC,EAAOD,QAAUkC,QAAQ,0C,cCAzBjC,EAAOD,QAAUkC,QAAQ,uC,uLCInBC,GADYC,QAAMC,UACTD,QAAMD,QACDC,QAAME,YACHF,QAAMG,eACVH,QAAMI,WACRJ,QAAMK,S,qkBCLFC,E,WAEjB,aAAuJ,IAA3IC,EAA2I,wDAAtHC,EAAsH,wDAAjGC,EAAiG,wDAArEC,EAAqE,wDAAzCC,EAAyC,wDAApBC,EAAoB,oEACnJL,EAAc,EAAH,KAAOA,GAAP,IAAoBK,eAC/BJ,EAAc,EAAH,KAAOA,GAAP,IAAoBI,eAC/BC,KAAKC,UAAY,IAAIC,IAAQR,GAC7BM,KAAKG,UAAY,IAAID,IAAQP,GAC7BK,KAAKI,UAAYJ,KAAKC,UAAUG,UAChCJ,KAAKb,MAAQa,KAAKC,UAAUd,MAC5Ba,KAAKK,sBAAsBT,GAC3BI,KAAKM,sBAAsBT,GAC3BG,KAAKO,WAAWT,GAChBE,KAAKQ,cAAgBR,KAAKb,MAAMsB,gBAAgBT,MAChDA,KAAKU,UAAYV,KAAKC,UAAUU,IAAID,UAEpC,IAAME,EAAOZ,KACbA,KAAKG,UAAUQ,IAAIE,KAAO,WACtB,OAAOD,EAAKC,KAAL,MAAAD,EAAI,YAEfZ,KAAKG,UAAUQ,IAAIG,UAAY,WAC3B,OAAOF,EAAKE,UAAL,MAAAF,EAAI,Y,+FAGnB,SAAsBhB,GAClB,IAAKI,KAAKI,UAAUR,GAChB,MAAM,IAAImB,MAAM,yCACpBf,KAAKJ,mBAAqBA,I,mCAG9B,SAAsBC,GAClB,IAAKG,KAAKI,UAAUP,GAChB,MAAM,IAAIkB,MAAM,yCACpBf,KAAKH,mBAAqBA,I,wBAG9B,SAAWC,GACP,IAAKE,KAAKb,MAAM6B,SAASlB,KAAiBA,EACtC,MAAM,IAAIiB,MAAM,iCACpBf,KAAKiB,QAAUnB,I,6BAGnB,SAAgBoB,EAAaC,GACE,iBAAhBD,IACPA,EAAclB,KAAKb,MAAMiC,KAAKC,iBAAiBH,IAEnD,IAAII,EAAiBtB,KAAKb,MAAMiC,KAAKC,iBAAiBrB,KAAKiB,SAEvDM,EAAUvB,KAAKb,MAAMiC,KAAKC,iBAAiBF,EAAYK,MAAMC,OAAOH,GACpEI,EAAcxC,EAAOqC,GACnBI,EAAY3B,KAAKb,MAAMyC,OAAOC,UAAU7B,KAAKb,MAAMiC,KAAKC,iBAAiBK,EAAYI,QAAQ,MAAO,KAAMZ,GAOhH,OALIa,MAAMC,QAAQb,EAAYQ,WACrBR,EAAYQ,UAAUM,SAASN,IAChCR,EAAYQ,UAAUO,KAAKP,GAE/BR,EAAYQ,UAAY,CAACA,GACtBR,I,wCAGX,oDAAAgB,EAAA,yDAAgBhB,EAAhB,gCAAqCpB,EAArC,+BAAkDC,KAAKG,UAAUiC,kBAAmBC,EAApF,gCAA0GC,EAA1G,gCACQtC,KAAKb,MAAMoD,WAAWF,KACtBC,EAAWD,EACXA,EAAe,GAGfrC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,kBAC5BC,EAAe,GAGdC,EAZT,yCAY0BtC,KAAKQ,cAAcR,KAAKc,UAAWK,EAAapB,EAAYsC,IAZtF,UAcSrC,KAAKb,MAAMqD,SAASrB,IAAiBA,EAAYsB,UAAatB,EAAYsB,SAASC,SAd5F,0CAc6GJ,EAAS,iCAdtH,eAiBInB,EAAYsB,SAASC,SAAS,GAAGC,cAAgBN,EAG3CO,EAAU5C,KAAKG,UAAUyC,QAAQC,MAAM7C,KAAKG,UAAUyC,QAAQE,eAAe/C,IAAagD,cApBpG,UAqB6B/C,KAAKG,UAAUQ,IAAIqC,cAAc7B,EAAakB,GArB3E,WAuBmC,sBAFzBY,EArBV,QAuBmBC,OAAO9B,KAvB1B,0CAwBckB,EAASW,EAAWC,OAAOC,UAxBzC,WA2BQC,GAAW,EACfH,EAAWI,WAAWC,KAAKC,KAAI,SAAA/E,GACxBA,EAAIoE,UAAYA,IAASQ,GAAW,MAGtCA,EAhCT,0CAgC0Bd,EAASvC,EAAa,+BAhChD,YAkCQkD,EAAWO,gBAA+D,GAA9CP,EAAWO,cAAcC,QAAQb,GAlCrE,0CAmCcN,EAASvC,EAAa,8BAnCpC,YAuCQkD,EAAW9B,cAAe8B,EAAW9B,YAAYA,YAvCzD,kBAwCQA,EAAc8B,EAAW9B,YAAYA,aACzBsB,SAASC,SAAS,GAAGC,cAAgBN,EAzCzD,iDA2CgBC,EAAS,iCA3CzB,2CAgDcA,EAAS,KAAMtC,KAAK0D,gBAAgB3D,EAAYoB,KAhD9D,mCAkDOmB,EAAS,EAAD,IAlDf,2D,gFAsDA,kDAAAH,EAAA,yDAAWhB,EAAX,gCAAgCpB,EAAhC,+BAA6CC,KAAKG,UAAUiC,kBAAmBuB,IAA/E,iCAAqGC,EAArG,gCAAuHtB,EAAvH,gCACQtC,KAAKb,MAAMoD,WAAWqB,KACtBtB,EAAWsB,EACXA,GAAW,GAGX5D,KAAKb,MAAMoD,WAAWoB,KACtBrB,EAAWqB,EACXA,GAAgB,EAChBC,GAAW,GAGX5D,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKG,UAAUiC,kBAC5BuB,GAAgB,EAChBC,GAAW,GAGVtB,EAnBT,0CAoBetC,KAAKQ,cAAcR,KAAKa,KAAMM,EAAapB,EAAY4D,EAAeC,IApBrF,YAuBQ5D,KAAKb,MAAM6B,SAASG,GAvB5B,oBAyBanB,KAAKb,MAAM0E,MAAM1C,GAzB9B,0CA0BmBmB,EAAS,+BA1B5B,yBA6BkBwB,EAAe9D,KAAKG,UAAUQ,IAAIoD,WAAW5C,EAAapB,EAAY4D,GA7BxF,kBA8BmBrB,EAAS,KAAMwB,IA9BlC,mCAgCYxB,EAAS,EAAD,IAhCpB,WAoCStC,KAAKb,MAAMqD,SAASrB,GApC7B,0CAqCemB,EAAS,iCArCxB,WAuCSsB,IAAYzC,EAAYQ,UAvCjC,0CAwCeW,EAAS,kCAxCxB,qBA2CasB,EA3Cb,oBA4C4B5D,KAAKG,UAAUyC,QAAQC,MACnC7C,KAAKG,UAAUyC,QAAQE,eAAe/C,IACxCgD,gBACc5B,EAAYsB,SAASC,SAAS,GAAGsB,UAAU9F,MAAM+F,cAAclB,cA/C3F,0CAgDuBT,EAAS,sDAhDhC,iCAkDeA,EAAS,KACZtC,KAAK0D,gBAAgB3D,EAAYoB,KAnD7C,mCAsDQmB,EAAS,EAAD,IAtDhB,mE,sFA6DA,WACI4B,EACAC,EACAC,GAHJ,mCAAAjC,EAAA,yDAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAhBT,yCAiBetC,KAAKQ,cAAcR,KAAKsE,WAAYJ,EAAWC,EAAYC,EAAUC,EAAStE,IAjB7F,WAmBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,YACNgH,KAAM,UACNtG,MAAOgG,EACPO,IAAK,GAET,CACIjH,KAAM,aACNgH,KAAM,UACNtG,MAAOiG,EACPM,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,MAEVrC,GAvCP,wDA0CI+B,EAAU,EAAH,CACHH,UAAWU,OAAOV,GAAaU,OAAOT,GACtCC,YACGC,GA7CX,oBAgDuCrE,KAAKC,UAAUyC,WAAWmC,GAAG7E,KAAKJ,oBAhDzE,eAgDckF,EAhDd,iBAiD6BA,EAAiBC,aAAaC,KAAKX,EAAStE,GAjDzE,eAiDcmD,EAjDd,yBAkDeZ,EAAS,KAAMY,IAlD9B,4DAoDeZ,EAAS,EAAD,KApDvB,2D,6FAwDA,WACI2C,EACAC,EACAf,EACAC,GAJJ,mCAAAjC,EAAA,yDAKIkC,EALJ,+BAKc,GACVtE,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCAQQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAhBT,yCAiBetC,KAAKQ,cAAcR,KAAKmF,aAAcF,EAASC,EAAYf,EAAYC,EAAUC,EAAStE,IAjBzG,WAmBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,aACNgH,KAAM,UACNtG,MAAOgH,EACPT,IAAK,GAET,CACIjH,KAAM,aACNgH,KAAM,UACNtG,MAAOiG,EACPM,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,KAET,CACInH,KAAM,UACNgH,KAAM,UACNtG,MAAO+G,EACPR,IAAK,IAEVnC,GA7CP,wDAgDI+B,EAAU,EAAH,GACHY,UACAC,aACAd,YACGC,GAJA,IAKHH,UAAWC,IArDnB,oBAwDuCnE,KAAKC,UAAUyC,WAAWmC,GAAG7E,KAAKJ,oBAxDzE,eAwDckF,EAxDd,iBAyD6BA,EAAiBM,aAAaH,EAASC,GAAYF,KAAKX,EAAStE,GAzD9F,QAyDcmD,EAzDd,OA0DQZ,EAAS,KAAMY,GA1DvB,4EA4DeZ,EAAS,EAAD,KA5DvB,2D,6FAgEA,WACI+C,EACAC,EACAC,EACAnB,EACAoB,GALJ,qCAAArD,EAAA,yDAMIkC,EANJ,+BAMc,GACVtE,EAPJ,+BAOiBC,KAAKC,UAAUmC,kBAC5BE,EARJ,gCAUQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAlBT,yCAmBetC,KAAKQ,cAAcR,KAAKyF,WAAYJ,EAAkBC,EAAKC,EAAKnB,EAAUoB,EAAiBnB,EAAStE,IAnBnH,WAqBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,mBACNgH,KAAM,mBACNtG,MAAOmH,GAEX,CACI7H,KAAM,MACNgH,KAAM,UACNtG,MAAOoH,EACPb,IAAK,GAET,CACIjH,KAAM,MACNgH,KAAM,UACNtG,MAAOqH,EACPd,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,KAET,CACInH,KAAM,kBACNgH,KAAM,UACNtG,MAAOsH,IAEZlD,GAnDP,oDAsDI+B,EAAU,EAAH,GACHD,YACGC,GAFA,IAGHH,UAAWqB,EACXN,QAAS,GACTC,WAAY,IA3DpB,UA8DYhC,EAAS,KACY,YAArBmC,EA/DZ,kCAgE0CrF,KAAKC,UAAUyC,WAAWmC,GAAGW,GAhEvE,eAgEkBE,EAhElB,iBAiE2BA,EAAgBC,QAAQ3F,KAAKJ,mBAAoB0F,GAAKN,KAAKX,EAAStE,GAjE/F,QAiEYmD,EAjEZ,gDAmE2ClD,KAAKC,UAAUyC,WAAWmC,GAAG7E,KAAKJ,oBAnE7E,QAmEkBkF,EAnElB,YAoEmBO,EApEnB,OAqEqB,iBArErB,QAwEqB,kBAxErB,QA2EqB,iBA3ErB,QA8EqB,iBA9ErB,0CAsEmCP,EAAiBc,aAAaJ,EAAiBF,GAAKN,KAAKX,EAAStE,GAtErG,eAsEoBmD,EAtEpB,qDAyEmC4B,EAAiBe,cAAcL,EAAiBF,GAAKN,KAAKX,EAAStE,GAzEtG,eAyEoBmD,EAzEpB,qDA4EmC4B,EAAiBgB,aAAaR,GAAKN,KAAKX,EAAStE,GA5EpF,eA4EoBmD,EA5EpB,qDA+EmC4B,EAAiBiB,aAAaT,GAAKN,KAAKX,EAAStE,GA/EpF,eA+EoBmD,EA/EpB,wEAqFQZ,EAAS,KAAMY,GArFvB,4EAuFeZ,EAAS,EAAD,KAvFvB,2D,iGA2FA,WACIgD,EACAlB,EACAoB,GAHJ,iCAAArD,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,UAR7B,kBASWrF,KAAKyF,WACRJ,EACAC,EACA,EACAlB,EACAoB,EACAnB,EACAtE,EACAuC,IAjBR,gD,8FAqBA,WACI0D,EACA5B,EACAoB,GAHJ,iCAAArD,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,UAR7B,kBASWrF,KAAKyF,WACRJ,EACAW,EACA,EACA5B,EACAoB,EACAnB,EACAtE,EACAuC,IAjBR,gD,6FAqBA,WACIgD,EACAnB,EACAC,EACAoB,GAJJ,iCAAArD,EAAA,6DAKIkC,EALJ,+BAKc,GACVtE,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCASU+C,EAAmB,eAT7B,kBAUWrF,KAAKyF,WACRJ,EACAC,EACAnB,EACAC,EACAoB,EACAnB,EACAtE,EACAuC,IAlBR,gD,gGAsBA,WACI0D,EACA7B,EACAC,EACAoB,GAJJ,iCAAArD,EAAA,6DAKIkC,EALJ,+BAKc,GACVtE,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCASU+C,EAAmB,gBAT7B,kBAUWrF,KAAKyF,WACRJ,EACAW,EACA7B,EACAC,EACAoB,EACAnB,EACAtE,EACAuC,IAlBR,gD,6FAyBA,WACI2D,EACAC,EACA9B,EACAiB,GAJJ,mCAAAlD,EAAA,yDAKIkC,EALJ,+BAKc,GACVtE,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,uBASQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAjBT,yCAkBetC,KAAKQ,cAAcR,KAAKmG,WAAYF,EAASC,EAAY9B,EAAUiB,EAAkBhB,EAAStE,IAlB7G,WAoBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,UACNgH,KAAM,mBACNtG,MAAO+H,GAEX,CACIzI,KAAM,aACNgH,KAAM,UACNtG,MAAOgI,EACPxB,GAAI,GAER,CACIlH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,MAEVrC,GAvCP,wDA0CI2D,EAAUA,EAAQG,WAAW,MAAQH,EAAW,KAAOA,EACvD5B,EAAU,EAAH,GACHD,YACGC,GAFA,IAGHH,UAAWgC,IA9CnB,oBAiDuClG,KAAKC,UAAUyC,WAAWmC,GAAG7E,KAAKJ,oBAjDzE,WAiDckF,EAjDd,OAkDY5B,EAAS,KACY,iBAArBmC,EAnDZ,kCAoD2BP,EAAiBuB,aAAaJ,GAASjB,KAAKX,EAAStE,GApDhF,QAoDYmD,EApDZ,kCAqDwC,kBAArBmC,EArDnB,kCAsD2BP,EAAiBwB,cAAcL,GAASjB,KAAKX,EAAStE,GAtDjF,QAsDYmD,EAtDZ,+BAwDYZ,EAAS,IAAIvB,MAAM,iCAxD/B,QA0DQuB,EAAS,KAAMY,GA1DvB,4EA4DeZ,EAAS,EAAD,KA5DvB,2D,+FAgEA,WACI2D,EACAC,EACA9B,GAHJ,iCAAAjC,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,eAR7B,kBASWrF,KAAKmG,WACRF,EACAC,EACA9B,EACAiB,EACAhB,EACAtE,EACAuC,IAhBR,gD,8FAmBA,WACI2D,EACAC,EACA9B,GAHJ,iCAAAjC,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,gBAR7B,kBASWrF,KAAKmG,WACRF,EACAC,EACA9B,EACAiB,EACAhB,EACAtE,EACAuC,IAhBR,gD,4FAsBA,WACI4B,EACAqC,EACAnC,GAHJ,mCAAAjC,EAAA,yDAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAhBT,yCAiBetC,KAAKQ,cAAcR,KAAKwG,YAAatC,EAAWqC,EAAanC,EAAUC,EAAStE,IAjB/F,WAmBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,YACNgH,KAAM,UACNtG,MAAOgG,EACPO,IAAK,GAET,CACIjH,KAAM,cACNgH,KAAM,UACNtG,MAAOqI,EACP9B,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,MAEVrC,GAvCP,wDA0CI+B,EAAU,EAAH,CACHH,UAAWU,OAAOV,GAAaU,OAAO2B,GACtCnC,YACGC,GA7CX,oBAgDuCrE,KAAKG,UAAUuC,WAAWmC,GAAG7E,KAAKH,oBAhDzE,eAgDciF,EAhDd,iBAiD6BA,EAAiB2B,cAAczB,KAAKX,EAAStE,GAjD1E,eAiDcmD,EAjDd,yBAkDeZ,EAAS,KAAMY,IAlD9B,4DAoDeZ,EAAS,EAAD,KApDvB,2D,8FAwDA,WACI2C,EACAC,EACAqB,EACAnC,GAJJ,mCAAAjC,EAAA,yDAKIkC,EALJ,+BAKc,GACVtE,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCASQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAjBT,yCAkBetC,KAAKQ,cAAcR,KAAK0G,cAAezB,EAASC,EAAYqB,EAAanC,EAAUC,EAAStE,IAlB3G,WAoBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,UACNgH,KAAM,UACNtG,MAAO+G,EACPR,IAAK,GAET,CACIjH,KAAM,aACNgH,KAAM,UACNtG,MAAOgH,EACPT,IAAK,GAET,CACIjH,KAAM,cACNgH,KAAM,UACNtG,MAAOqI,EACP9B,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,MAEVrC,GA9CP,wDAiDI+B,EAAU,EAAH,CACHa,aACAD,UACAf,UAAWqC,EACXnC,YACGC,GAtDX,oBAyDuCrE,KAAKG,UAAUuC,WAAWmC,GAAG7E,KAAKH,oBAzDzE,eAyDciF,EAzDd,iBA0D6BA,EAAiB6B,cAAc1B,EAASC,GAAYF,KAAKX,EAAStE,GA1D/F,eA0DcmD,EA1Dd,yBA2DeZ,EAAS,KAAMY,IA3D9B,4DA6DeZ,EAAS,EAAD,KA7DvB,2D,8FAiEA,WACI+C,EACAuB,EACAL,EACAnC,EACAoB,GALJ,oDAAArD,EAAA,yDAMIkC,EANJ,+BAMc,GACVtE,EAPJ,+BAOiBC,KAAKC,UAAUmC,kBAC5BE,EARJ,gCAUQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAE5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAlBT,yCAmBetC,KAAKQ,cAAcR,KAAK6G,YAAaxB,EAAkBuB,EAASL,EAAanC,EAAUoB,EAAiBnB,EAAStE,IAnBhI,WAqBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,mBACNgH,KAAM,mBACNtG,MAAOmH,GAEX,CACI7H,KAAM,UACNgH,KAAM,UACNtG,MAAO0I,EACPnC,IAAK,GAET,CACIjH,KAAM,cACNgH,KAAM,UACNtG,MAAOqI,EACP9B,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,KAET,CACInH,KAAM,kBACNgH,KAAM,UACNtG,MAAOsH,IAEZlD,GAnDP,wDAsDI+B,EAAU,EAAH,GACHD,YACGC,GAFA,IAGHH,UAAWqC,IAETO,EAAa,CACf,CACItC,KAAM,UACNtG,MAAO0I,IA9DnB,UAmEchE,EAAU7C,EAAaC,KAAKG,UAAUyC,QAAQE,eAAe/C,GAAcC,KAAKG,UAAU4G,eAAeC,OAnEvH,UAoEkChH,KAAKG,UAAU8G,mBAAmBC,qBACxD1B,EACAH,EACAhB,EACAyC,EACA9G,KAAKG,UAAUyC,QAAQC,MAAMD,IAzEzC,YAoEczB,EApEd,QA2EyB+B,QAAW/B,EAAY+B,OAAOA,OA3EvD,0CA4EmBZ,EAAS,kBAAoB6E,KAAKC,UAAUjG,EAAYA,YAAa,KAAM,KA5E9F,yBA+EwCnB,KAAKG,UAAUQ,IAAIE,KAAKM,EAAYA,YAAapB,GA/EzF,YA+EcsH,EA/Ed,QAiF+B1F,UAjF/B,oBAkFiB5B,EAlFjB,0CAmFuBuC,EAAS,wCAnFhC,iCAqFmBA,EAAS,iCArF5B,yBAwFgCtC,KAAKG,UAAUQ,IAAI2G,mBAAmBD,GAxFtE,aAwFcE,EAxFd,QAyFsBnG,KAzFtB,wBA0FkBoG,EAAM,CACRC,MAAOF,EAAUnG,KACjB+B,QAASoE,EAAUnG,MAEnBmG,EAAUpE,UACVqE,EAAIrE,QAAUnD,KAAKG,UAAUuH,OAAOH,EAAUpE,UA/F9D,kBAgGmBb,EAASkF,IAhG5B,WAmGanD,EAAQsD,mBAnGrB,0CAoGmBrF,EAAS,KAAM+E,EAAkB7F,OApGpD,SAsGcoG,EAtGd,uBAAAzF,EAAA,MAsG4B,4CAAAA,EAAA,yDACH,KADU0F,EAAP,+BAAe,GAAf,yCAELvF,EAAS,CACZmF,MAAO,sCACPtG,YAAakG,KAJL,uBAQK,EAAKlH,UAAUQ,IAAImH,mBAAmBT,EAAkB7F,MAR7D,UAQVuG,EARU,OAUXpK,OAAO2F,KAAKyE,GAAQC,OAVT,yCAWLC,YAAW,WACdL,EAAYC,EAAQ,KACrB,MAbS,WAgBZE,EAAO7E,QAA2B,UAAjB6E,EAAO7E,OAhBZ,0CAiBLZ,EAAS,CACZmF,MAAO,EAAKtH,UAAUuH,OAAOK,EAAOG,YACpC/G,YAAakG,EACbU,YApBQ,WAwBX5I,MAAMgJ,YAAYJ,EAAQ,kBAxBf,0CAyBLzF,EAAS,CACZmF,MAAO,sBAAwBN,KAAKC,UAAUW,EAAQ,KAAM,GAC5D5G,YAAakG,EACbU,YA5BQ,YAgCZ1D,EAAQ+D,YAhCI,0CAiCL9F,EAAS,KAAMyF,IAjCV,eAqCO,KAFnBM,EAAUC,aAAa,EAAKC,QAAS,KAAOR,EAAOS,eAAe,KAE1DR,SACRK,EAAUA,EAAQ,IAtCN,kBAwCT/F,EAAS,KAAM+F,IAxCN,4CAtG5B,oIAmJe/F,EAAS,EAAD,KAnJvB,2D,kGAuJA,WACIgD,EACAiB,EACAnC,EACAoB,EACAnB,GALJ,+BAAAlC,EAAA,6DAMIpC,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCASU+C,EAAmB,sBAT7B,kBAUWrF,KAAK6G,YACRxB,EACAC,EACAiB,EACAnC,EACAoB,EACAnB,EACAtE,EACAuC,IAlBR,gD,mGAqBA,WACI0D,EACAO,EACAnC,EACAoB,EACAnB,GALJ,+BAAAlC,EAAA,6DAMIpC,EANJ,+BAMiBC,KAAKC,UAAUmC,kBAC5BE,EAPJ,gCASU+C,EAAmB,sBAT7B,kBAUWrF,KAAK6G,YACRxB,EACAW,EACAO,EACAnC,EACAoB,EACAnB,EACAtE,EACAuC,IAlBR,gD,+FAsBA,WACIgD,EACAlB,EACAC,GAHJ,yCAAAlC,EAAA,yDAIIpC,EAJJ,+BAIiBC,KAAKC,UAAUmC,kBAC5BE,EALJ,gCAOQtC,KAAKb,MAAMoD,WAAWxC,KACtBuC,EAAWvC,EACXA,EAAaC,KAAKC,UAAUmC,mBAG5BpC,KAAKb,MAAMoD,WAAW8B,KACtB/B,EAAW+B,EACXA,EAAU,IAET/B,EAhBT,yCAiBetC,KAAKQ,cAAcR,KAAKyI,WAAYnD,EAAKlB,EAAUC,EAAStE,IAjB3E,WAmBQC,KAAKU,UAAU6D,SAAS,CACxB,CACI/G,KAAM,MACNgH,KAAM,UACNtG,MAAOoH,EACPb,IAAK,GAET,CACIjH,KAAM,WACNgH,KAAM,UACNtG,MAAOkG,EACPM,GAAI,EACJC,IAAK,MAEVrC,GAjCP,iEAsCcM,EAAU5C,KAAKG,UAAUyC,QAAQE,eAAe/C,GAChD2I,EAAa1I,KAAKG,UAAUyC,QAAQC,MAAMD,GAvCxD,UAwCkC5C,KAAKG,UAAUwI,SAASC,QAAQ,qBAAsB,CAC5E3E,cAAeyE,EACfG,OAAQvD,GACT,QA3CX,eAwCcnE,EAxCd,iBA6CwCnB,KAAKG,UAAUQ,IAAIE,KAAKM,EAAapB,GA7C7E,YA6CcsH,EA7Cd,QA+C+B1F,UA/C/B,oBAgDiB5B,EAhDjB,0CAiDuBuC,EAAS,wCAjDhC,iCAmDmBA,EAAS,iCAnD5B,yBAsDgCtC,KAAKG,UAAUQ,IAAI2G,mBAAmBD,GAtDtE,aAsDcE,EAtDd,QAuDsBnG,KAvDtB,wBAwDkBoG,EAAM,CACRC,MAAOF,EAAUnG,KACjB+B,QAASoE,EAAUnG,MAEnBmG,EAAUpE,UACVqE,EAAIrE,QAAUnD,KAAKC,UAAUyH,OAAOH,EAAUpE,UA7D9D,kBA8DmBb,EAASkF,IA9D5B,iCAgEelF,EAAS,KAAM+E,EAAkB7F,OAhEhD,2DAkEec,EAAS,EAAD,KAlEvB,0D,8FAsEA,WACIwG,EACAC,EACA3E,GAHJ,iCAAAjC,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKG,UAAUiC,kBAC5BE,EANJ,gCAQU+C,EAAmB,yBAR7B,kBASWrF,KAAK6G,YACRxB,EACAyD,EACAC,EACA3E,EACApE,KAAKH,mBACLwE,EACAtE,EACAuC,IAjBR,gD,6FAqBA,WACIwG,EACAE,EACA5E,GAHJ,iCAAAjC,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,eAR7B,kBASWrF,KAAKyF,WACRJ,EACAyD,EACAE,EACA5E,EACApE,KAAKJ,mBACLyE,EACAtE,EACAuC,IAjBR,gD,6FAqBA,WACIwG,EACAG,EACA7E,GAHJ,iCAAAjC,EAAA,6DAIIkC,EAJJ,+BAIc,GACVtE,EALJ,+BAKiBC,KAAKC,UAAUmC,kBAC5BE,EANJ,gCAQU+C,EAAmB,eAR7B,kBASWrF,KAAKyF,WACRJ,EACAyD,EACAG,EACA7E,EACApE,KAAKJ,mBACLyE,EACAtE,EACAuC,IAjBR,gD,6DA9+BiB7C,E,UACAS,Q","file":"SolWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"ethers\");","module.exports = require(\"liteweb\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","\nimport {utils} from 'ethers';\n\nconst keccak256 = utils.keccak256;\nconst sha256 = utils.sha256;\nconst toUtf8Bytes = utils.toUtf8Bytes;\nconst recoverAddress = utils.recoverAddress;\nconst SigningKey = utils.SigningKey;\nconst AbiCoder = utils.AbiCoder;\n\nexport {\n    keccak256,\n    sha256,\n    toUtf8Bytes,\n    recoverAddress,\n    SigningKey,\n    AbiCoder\n}\n","import LiteWeb from 'liteweb';\nimport {sha256} from './helper/ethersUtils';\n\nexport default class SolWeb {\n    static LiteWeb = LiteWeb;\n    constructor(mainOptions = false, sideOptions = false, mainGatewayAddress = false, sideGatewayAddress = false, sideChainId = false, privateKey = false) {\n        mainOptions = {...mainOptions, privateKey};\n        sideOptions = {...sideOptions, privateKey};\n        this.mainchain = new LiteWeb(mainOptions);\n        this.sidechain = new LiteWeb(sideOptions);\n        this.isAddress = this.mainchain.isAddress;\n        this.utils = this.mainchain.utils;\n        this.setMainGatewayAddress(mainGatewayAddress);\n        this.setSideGatewayAddress(sideGatewayAddress);\n        this.setChainId(sideChainId);\n        this.injectPromise = this.utils.promiseInjector(this);\n        this.validator = this.mainchain.xlt.validator;\n\n        const self = this;\n        this.sidechain.xlt.sign = (...args) => {\n            return self.sign(...args);\n        };\n        this.sidechain.xlt.multiSign = (...args) => {\n            return self.multiSign(...args);\n        };\n    }\n    setMainGatewayAddress(mainGatewayAddress) {\n        if (!this.isAddress(mainGatewayAddress))\n            throw new Error('Invalid main gateway address provided');\n        this.mainGatewayAddress = mainGatewayAddress;\n    }\n\n    setSideGatewayAddress(sideGatewayAddress) {\n        if (!this.isAddress(sideGatewayAddress))\n            throw new Error('Invalid side gateway address provided');\n        this.sideGatewayAddress = sideGatewayAddress;\n    }\n\n    setChainId(sideChainId) {\n        if (!this.utils.isString(sideChainId) || !sideChainId)\n            throw new Error('Invalid side chainId provided');\n        this.chainId = sideChainId;\n    }\n\n    signTransaction(priKeyBytes, transaction) {\n        if (typeof priKeyBytes === 'string') {\n            priKeyBytes = this.utils.code.hexStr2byteArray(priKeyBytes);\n        }\n        let chainIdByteArr = this.utils.code.hexStr2byteArray(this.chainId);\n\n        let byteArr = this.utils.code.hexStr2byteArray(transaction.txID).concat(chainIdByteArr);\n        let byteArrHash = sha256(byteArr);\n        const signature = this.utils.crypto.ECKeySign(this.utils.code.hexStr2byteArray(byteArrHash.replace(/^0x/, '')), priKeyBytes);\n\n        if (Array.isArray(transaction.signature)) {\n            if (!transaction.signature.includes(signature))\n                transaction.signature.push(signature);\n        } else\n            transaction.signature = [signature];\n        return transaction;\n    }\n\n    async multiSign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, permissionId = false, callback = false) {\n        if (this.utils.isFunction(permissionId)) {\n            callback = permissionId;\n            permissionId = 0;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n            permissionId = 0;\n        }\n\n        if (!callback) return this.injectPromise(this.multiSign, transaction, privateKey, permissionId);\n\n        if (!this.utils.isObject(transaction) || !transaction.raw_data || !transaction.raw_data.contract) return callback('Invalid transaction provided');\n\n        // set permission id\n        transaction.raw_data.contract[0].Permission_id = permissionId;\n\n        // check if private key insides permission list\n        const address = this.sidechain.address.toHex(this.sidechain.address.fromPrivateKey(privateKey)).toLowerCase();\n        const signWeight = await this.sidechain.xlt.getSignWeight(transaction, permissionId);\n\n        if (signWeight.result.code === 'PERMISSION_ERROR') {\n           return callback(signWeight.result.message);\n        }\n\n        let foundKey = false;\n        signWeight.permission.keys.map(key => {\n           if (key.address === address) foundKey = true;\n        });\n\n        if (!foundKey) return callback(privateKey + ' has no permission to sign');\n\n        if (signWeight.approved_list && signWeight.approved_list.indexOf(address) != -1) {\n           return callback(privateKey + ' already sign transaction');\n        }\n\n        // reset transaction\n        if (signWeight.transaction && signWeight.transaction.transaction) {\n            transaction = signWeight.transaction.transaction;\n            transaction.raw_data.contract[0].Permission_id = permissionId;\n        } else {\n             return callback('Invalid transaction provided');\n        }\n\n        // sign\n        try {\n           return callback(null, this.signTransaction(privateKey, transaction));\n        } catch (ex) {\n           callback(ex);\n        }\n    }\n\n    async sign(transaction = false, privateKey = this.sidechain.defaultPrivateKey, useLiteHeader = true, multisig = false, callback = false) {\n        if (this.utils.isFunction(multisig)) {\n            callback = multisig;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(useLiteHeader)) {\n            callback = useLiteHeader;\n            useLiteHeader = true;\n            multisig = false;\n        }\n\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.sidechain.defaultPrivateKey;\n            useLiteHeader = true;\n            multisig = false;\n        }\n\n        if (!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useLiteHeader, multisig);\n\n        // Message signing\n        if (this.utils.isString(transaction)) {\n\n            if (!this.utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signatureHex = this.sidechain.xlt.signString(transaction, privateKey, useLiteHeader);\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if (!this.utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if (!multisig && transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            if (!multisig) {\n                const address = this.sidechain.address.toHex(\n                    this.sidechain.address.fromPrivateKey(privateKey)\n                ).toLowerCase();\n                if (address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                    return callback('Private key does not match address in transaction');\n            }\n            return callback(null,\n                this.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n     /**\n     * deposit asset to sidechain\n     */\n    async depositXlt(\n        callValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositXlt, callValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(depositFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositXLT().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc10(\n        tokenId,\n        tokenValue,\n        depositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc10, tokenId, tokenValue, depositFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'depositFee',\n                type: 'integer',\n                value: depositFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenId,\n            tokenValue,\n            feeLimit,\n            ...options,\n            callValue: depositFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            const result = await contractInstance.depositTRC10(tokenId, tokenValue).send(options, privateKey);\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async depositTrc(\n        functionSelector,\n        num,\n        fee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.depositTrc, functionSelector, num, fee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'fee',\n                type: 'integer',\n                value: fee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: fee,\n            tokenId: '',\n            tokenValue: 0\n        };\n        try {\n            let result = null;\n            if (functionSelector === 'approve') {\n                const approveInstance = await this.mainchain.contract().at(contractAddress);\n                result = await approveInstance.approve(this.mainGatewayAddress, num).send(options, privateKey);\n            } else {\n                const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n                switch(functionSelector) {\n                    case 'depositTRC20':\n                        result = await contractInstance.depositTRC20(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'depositTRC721':\n                        result = await contractInstance.depositTRC721(contractAddress, num).send(options, privateKey);\n                        break;\n                    case 'retryDeposit':\n                        result = await contractInstance.retryDeposit(num).send(options, privateKey);\n                        break; \n                    case 'retryMapping':\n                        result = await contractInstance.retryMapping(num).send(options, privateKey);\n                        break;\n                    default:\n                        break;\n                }\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async approveTrc20(\n        num,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async approveTrc721(\n        id,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'approve';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            0,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc20(\n        num,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC20';\n        return this.depositTrc(\n            functionSelector,\n            num,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async depositTrc721(\n        id,\n        depositFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'depositTRC721';\n        return this.depositTrc(\n            functionSelector,\n            id,\n            depositFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    /**\n     * mapping asset TRC20 or TRC721 to DAppChain\n     */\n    async mappingTrc(\n        xltHash,\n        mappingFee,\n        feeLimit,\n        functionSelector,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.mappingTrc, xltHash, mappingFee, feeLimit, functionSelector, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'xltHash',\n                type: 'not-empty-string',\n                value: xltHash\n            },\n            {\n                name: 'mappingFee',\n                type: 'integer',\n                value: mappingFee,\n                gt: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        xltHash = xltHash.startsWith('0x') ? xltHash : ('0x' + xltHash);\n        options = {\n            feeLimit,\n            ...options,\n            callValue: mappingFee\n        };\n        try {\n            const contractInstance = await this.mainchain.contract().at(this.mainGatewayAddress);\n            let result = null;\n            if (functionSelector === 'mappingTRC20') {\n                result = await contractInstance.mappingTRC20(xltHash).send(options, privateKey);\n            } else if (functionSelector === 'mappingTRC721') {\n                result = await contractInstance.mappingTRC721(xltHash).send(options, privateKey);\n            } else {\n                callback(new Error('type must be trc20 or trc721'));\n            }\n            callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async mappingTrc20(\n        xltHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC20';\n        return this.mappingTrc(\n            xltHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async mappingTrc721(\n        xltHash,\n        mappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'mappingTRC721';\n        return this.mappingTrc(\n            xltHash,\n            mappingFee,\n            feeLimit,\n            functionSelector,\n            options,\n            privateKey,\n            callback);\n    }\n\n    /**\n     * withdraw xlt from sidechain to mainchain\n     */\n    async withdrawXlt(\n        callValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawXlt, callValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'callValue',\n                type: 'integer',\n                value: callValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            callValue: Number(callValue) + Number(withdrawFee),\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawXLT().send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc10(\n        tokenId,\n        tokenValue,\n        withdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc10, tokenId, tokenValue, withdrawFee, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'tokenId',\n                type: 'integer',\n                value: tokenId,\n                gte: 0\n            },\n            {\n                name: 'tokenValue',\n                type: 'integer',\n                value: tokenValue,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            tokenValue,\n            tokenId,\n            callValue: withdrawFee,\n            feeLimit,\n            ...options\n        };\n        try {\n            const contractInstance = await this.sidechain.contract().at(this.sideGatewayAddress);\n            const result = await contractInstance.withdrawTRC10(tokenId, tokenValue).send(options, privateKey);\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc(\n        functionSelector,\n        numOrId,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.withdrawTrc, functionSelector, numOrId, withdrawFee, feeLimit, contractAddress, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'functionSelector',\n                type: 'not-empty-string',\n                value: functionSelector\n            },\n            {\n                name: 'numOrId',\n                type: 'integer',\n                value: numOrId,\n                gte: 0\n            },\n            {\n                name: 'withdrawFee',\n                type: 'integer',\n                value: withdrawFee,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            },\n            {\n                name: 'contractAddress',\n                type: 'address',\n                value: contractAddress\n            }\n        ], callback)) {\n            return;\n        }\n        options = {\n            feeLimit,\n            ...options,\n            callValue: withdrawFee\n        };\n        const parameters = [\n            {\n                type: 'uint256',\n                value: numOrId\n            }\n        ];\n\n        try {\n            const address = privateKey ? this.sidechain.address.fromPrivateKey(privateKey) : this.sidechain.defaultAddress.base58;\n            const transaction = await this.sidechain.transactionBuilder.triggerSmartContract(\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                this.sidechain.address.toHex(address)\n            );\n            if (!transaction.result || !transaction.result.result) {\n                return callback('Unknown error: ' + JSON.stringify(transaction.transaction, null, 2));\n            }\n\n            const signedTransaction = await this.sidechain.xlt.sign(transaction.transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.xlt.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.sidechain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n\n            if (!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if (index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.sidechain.xlt.getTransactionInfo(signedTransaction.txID);\n\n                if (!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if (output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.sidechain.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if (options.rawResponse)\n                    return callback(null, output);\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if (decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async withdrawTrc20(\n        num,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            num,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n    async withdrawTrc721(\n        id,\n        withdrawFee,\n        feeLimit,\n        contractAddress,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'withdrawal(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            id,\n            withdrawFee,\n            feeLimit,\n            contractAddress,\n            options,\n            privateKey,\n            callback);\n    }\n\n\n    async injectFund(\n        num,\n        feeLimit,\n        options,\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        if (this.utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.mainchain.defaultPrivateKey;\n        }\n\n        if (this.utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n        if (!callback) {\n            return this.injectPromise(this.injectFund, num, feeLimit, options, privateKey);\n        }\n        if (this.validator.notValid([\n            {\n                name: 'num',\n                type: 'integer',\n                value: num,\n                gte: 0\n            },\n            {\n                name: 'feeLimit',\n                type: 'integer',\n                value: feeLimit,\n                gt: 0,\n                lte: 1_000_000_000\n            }\n        ], callback)) {\n            return;\n        }\n\n        try {\n            const address = this.sidechain.address.fromPrivateKey(privateKey);\n            const hexAddress = this.sidechain.address.toHex(address);\n            const transaction = await this.sidechain.fullNode.request('/wallet/fundinject', {\n                owner_address: hexAddress,\n                amount: num\n            }, 'post');\n\n            const signedTransaction = await this.sidechain.xlt.sign(transaction, privateKey);\n\n            if (!signedTransaction.signature) {\n                if (!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.sidechain.xlt.sendRawTransaction(signedTransaction);\n            if (broadcast.code) {\n                const err = {\n                    error: broadcast.code,\n                    message: broadcast.code\n                };\n                if (broadcast.message)\n                    err.message = this.mainchain.toUtf8(broadcast.message);\n                return callback(err)\n            }\n            return callback(null, signedTransaction.txID);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async retryWithdraw(\n        nonce,\n        retryWithdrawFee,\n        feeLimit,\n        options = {},\n        privateKey = this.sidechain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryWithdraw(uint256)';\n        return this.withdrawTrc(\n            functionSelector,\n            nonce,\n            retryWithdrawFee,\n            feeLimit,\n            this.sideGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryDeposit(\n        nonce,\n        retryDepositFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryDeposit';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryDepositFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n\n    async retryMapping(\n        nonce,\n        retryMappingFee,\n        feeLimit,\n        options = {},\n        privateKey = this.mainchain.defaultPrivateKey,\n        callback = false\n    ) {\n        const functionSelector = 'retryMapping';\n        return this.depositTrc(\n            functionSelector,\n            nonce,\n            retryMappingFee,\n            feeLimit,\n            this.mainGatewayAddress,\n            options,\n            privateKey,\n            callback\n        );\n    }\n}\n\n"],"sourceRoot":""}